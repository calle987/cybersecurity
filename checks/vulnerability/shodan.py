#!/usr/bin/python3
import os
import sys
import json
import socket
import requests

import dns.resolver

key = os.environ.get("SHODAN_KEY")

results = []

dbports = [5432, 1433, 1434, 3306, 3050, 5432, 3351, 1583]
adports = [9389, 389, 636, 88, 445]
redis = [6379, 26379]

badPorts = dbports + adports + redis

def main(type: str, target: str):
    """Main method

    Args:
        type (str): Type of target.
        target (str): Domain to check.
    """
    targets = []

    if type == "domain":
        targets = resolve(target)
    elif type == "ip":
        targets = [target]

    results = []

    for ip in targets:
        results.extend(checkTarget(ip))

    print(json.dumps(results))

def resolve(domain: str) -> list:
    """Resolve a domain to a set of ip addresses.
    """
    ips = []
    try:
        result = dns.resolver.resolve(domain)
        for ipVal in result:
            ips.append(ipVal.to_text())
        return ips
    except Exception as e:
        print("{}")
        sys.exit(0)

def doShodanRequest(ip: str) -> dict:
    """Make a Shodan API call.
    """
    try:
        response = requests.get("https://api.shodan.io/shodan/host/" + ip + "?key=" + key)
        return json.loads(response.text)
    except:
        print("{}")
        sys.exit(0)

def checkTarget(ip: str) -> list:
    """ Check an ip against shodan.

    Args:
        host_ip (str): The ip address to check.
    """
    response = doShodanRequest(ip)

    # Force YYYY-MM-DDThh:mm:ss format
    last_update = response["last_update"][:19]

    # Search for database tag
    if "tags" in response:
        databaseFound = False
        for tag in response["tags"]:
            if tag == "database":
                results.append({
                    "name": "database",
                    "score": 0,
                    "message": "Shodan found a database.",
                    "description": "database"
                })
            databaseFound = True
            break

        if not databaseFound:
            results.append({
                "name": "database",
                "score": 10,
                "message": "Shodan didn't find a database.",
                "date": last_update,
                "description": "database"
            })

    # Find open ports
    foundPorts = list(set(response["ports"]) & set(badPorts))
    if len(foundPorts) > 0:
        results.append({
            "name": "badports",
            "score": 10 - 2 * len(foundPorts),
            "message": "Shodan has found " + len(foundPorts) + " critical open ports.",
            "date": last_update,
            "description": "badports"
        })
    else:
        results.append({
            "name": "badports",
            "score": 10,
            "message": "Shodan has not found any critical open ports.",
            "date": last_update,
            "description": "badports"
        })

    if "vulns" in response:
        vulns = response["vulns"]
        score = 10 - 2 * len(vulns)

        results.append({
            "name": "Vulnabilities",
            "score": score,
            "message": "Shodan has found " + str(len(vulns)) +  " CVEs.",
            "info": vulns,
            "date": last_update,
            "description": "shodan"
        })

    else:
        results.append({
            "name": "Vulnabilities",
            "score": 10,
            "message": "Shodan did not found any CVEs.",
            "date": last_update,
            "description": "shodan"
        })

    return results

if __name__ == "__main__":
    main(sys.argv[1], sys.argv[2])
